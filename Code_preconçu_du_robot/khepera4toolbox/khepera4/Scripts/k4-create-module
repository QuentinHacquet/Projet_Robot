#! /usr/bin/perl
use strict;

# Include the k4-commons file
my $basepath=($0 =~ /(.*)\/(.*?)/)[0];
require $basepath.'/k4-commons', 'INCLUDED';

# Parse the command line
my $project_folder='.';
while (my $cmd=shift) {
	if ($cmd =~ /^-h$/) {
		&help();
	} else {
		$project_folder=$cmd;
	}
}

# Check if the project folder exists, and create it if necessary
if ($project_folder eq '.') {
	$project_folder=`pwd`;
	while (chomp $project_folder) {}
}
if (! -d $project_folder) {
	&print_and_execute('mkdir', $project_folder) && die 'Unable to "mkdir '.$project_folder.'"';
}

# Check if the folder is empty (hidden files and "." and ".." are allowed)
opendir(D, $project_folder);
foreach my $file (readdir(D)) {
	next if ($file =~ /^\./);
	print 'There are files in the folder you want to use for your new program. This script only sets up a new empty project folder, however, in order to avoid overwriting other files.', "\n";
	print "\n";
	die 'Project folder creation abandoned';
}
closedir(D);

# Derive the project name
my $project_name=$project_folder;
$project_name=$1 if ($project_name =~ /\/([^\/]*)$/);
$project_name='new_program' if ($project_name eq '');

# Copy the necessary files
print 'Writing ', $project_name, '.c', "\n";
&copy_template($basepath.'/../Modules/template/template.c', $project_folder.'/'.$project_name.'.c') || die 'Unable to create template.c';
print 'Writing ', $project_name, '.h', "\n";
&copy_template($basepath.'/../Modules/template/template.h', $project_folder.'/'.$project_name.'.h') || die 'Unable to create template.h';

# Check if the environment variable K4_ROOT is defined
my $k4_root_defined=($ENV{'K4_ROOT'} ne '');

# Write the Makefile
print 'Writing Makefile', "\n";
open(IN, '<', $basepath.'/../Modules/template/Makefile');
open(OUT, '>', $project_folder.'/Makefile');
while (my $line=<IN>) {
	if ($line =~ /^\s*ARCHIVE/) {
		$line = "ARCHIVE\t:= ".$project_name.".a\n";
	} elsif ($line =~ /^\s*#?\s*K4_ROOT/) {
		if ($k4_root_defined) {
			$line='include $(K4_ROOT)/Makefile.include'."\n";
			$line='#K4_ROOT'."\t".':= '.$basepath.'/..'."\n";
		} else {
			$line='K4_ROOT'."\t".':= '.$basepath.'/..'."\n";
			print "\n";
			print 'Warning: The environment variable K4_ROOT is not defined. The Makefile was', "\n";
			print '         configured with an absolute path to the Khepera IV Toolbox.', "\n";
		}
	}
	print OUT $line;
}
close OUT;
close IN;

print "\n";
print 'Module project "', $project_name, '" created!', "\n";
print 'You can now edit "', $project_name, '.c" and type "make" to compile your module.', "\n";
print 'Note that if your module consist of multiple files, all files should start with "', $project_name, '_".', "\n";

# Help
sub help {
	if (my $err=shift) {
		print $err, "\n";
		print "\n";
	}

	print 'Creates a new Khepera IV module project.', "\n";
	print 'Usage: k4-create-module [FOLDER]', "\n";
	exit(1);
}

# Copies a file, replacing "template" by the name of the project
sub copy_template {
	my $file_in=shift;
	my $file_out=shift;

	my $project_name_uppercase=uc($project_name);
	my $project_name_caps=join('', map {uc(substr($_, 0, 1)).substr($_, 1)} split(/_/, $project_name));

	open(IN, '<', $file_in) || return 0;
	open(OUT, '>', $file_out) || return 0;
	while (my $line=<IN>) {
		$line =~ s/template/$project_name/g;
		$line =~ s/TEMPLATE/$project_name_uppercase/g;
		$line =~ s/Template/$project_name_caps/g;
		print OUT $line;
	}
	close OUT;
	close IN;
	
	return 1;
}
